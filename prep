STRINGS
>>> a = "this is a string"
>>> a = a.split(" ") # a is converted to a list of strings. 
>>> print a
['this', 'is', 'a', 'string']

>>> a = "-".join(a)
>>> print a
this-is-a-string 

#adding words and variables:
print("Hello "+a+" "+b+"! You just delved into python.")

#adding letter within a string:
string = string[:5] + "k" + string[6:]

# let us create a test string

testString1 = "Hello World!"
print "Original String: "+ testString1
# Print this string in lower case

# Converting a string to lower case
print "Converting to LowerCase"
print testString1.lower()

# Converting a string to upper case
print "Converting to Upper Case"
print testString1.upper()

# Capitalizing a string
# Only the first letter in the string will be capitalized
print "Capitalizing the String"
print testString1.capitalize()

# Trying to slice out a substring between given indexes
print "Substring from index 1 to 7"
print testString1[1:8]

#Substring from the start till character at index = 7 (start of string is index 0)
print "Substring from the start till character at index = 7 (start of string is index 0): "
print testString1[:8]

#Substring from the character at index = 7, till the end of the string (remember: start of string is index 0)
print "Substring from the character at index = 7, till the end of the string (remember: start of string is index 0): "
print testString1[7:]

#Find the position of a  substring within the string
#This gives us the first index during a left to right scan. If the string is not found, it returns -1
print "Find the index from which the substring 'llo' begins within the test string"
print testString1.find('llo')

print "Now, let's look for a substring which is not a part of the given string"
print testString1.find('xxy')

# Now, trying to find the index of a substring between specified indexes only
print "Now, trying to find a substring between specified indexes only: looking for 'l' between 4 and 9"
print testString1.find('l',4,9)

# rfind is used, to find the index from the reverse
# So, testString1.rfind('l') will look for the last index of l in the string
print "find('l') on the given string returns the following index (scanning the string from left to right):"
print testString1.find('l')

print "rfind('l') on the given string returns the following index (this scans the string from right to left):"
print testString1.rfind('l')

# Now let us try to replace/substitute a substring of this string with another string
print "Replacing World with Planet"
print testString1.replace("World","Planet")


# Now let us try to split the string, into separate words
# let us split it wherever there is a space
print "Splitting the string into words, wherever there is a space"
print testString1.split(" ")
print testString1.rsplit(" ")

# Remove leading and trailing whitespace characters
testString2 = "Hello World!  "
print "Current Test String=" + testString2
print "Length (there are whitespaces at the end):" + `len(testString2)`
print "Length after stripping "+ `len(testString2.strip())`


#checking state of the text:
    print (any(map(lambda x: x.isalnum() , s)))
    print (any(map(lambda x: x.isalpha() , s)))
    print (any(map(lambda x: x.isdigit() , s)))
    print (any(map(lambda x: x.islower() , s)))
    print (any(map(lambda x: x.isupper() , s)))
    
#counter
>>> from collections import Counter
>>> 
>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]
>>> print Counter(myList)
Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})
>>>
>>> print Counter(myList).items()
[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]
>>> 
>>> print Counter(myList).keys()
[1, 2, 3, 4, 5]
>>> 
>>> print Counter(myList).values()
[3, 4, 4, 2, 1]    


#lists
l=[]
l.append(a)
l.sort()
b= sorted(a)
b= sorted(a, reverse=True)
b.reverse()


#dictionaries
>>> d = dict()
>>> d['key_1'] = 'value_1'
>>> d['key_2'] = 'value_2'
>>> d['key_3'] = 'value_3'
>>> d['key_4'] = 'value_4'
>>> d
{'key_1': 'value_1',
'key_2': 'value_2',
'key_3': 'value_3',
'key_4': 'value_4'}
#You can go through the elements of a dictionary:
#You can also access the keys or the values

>>> list(d.keys())
['key_4', 'key_3', 'key_1', 'key_2']

>>> list(d.values())
['value_4', 'value_3', 'value_1', 'value_2']
#Usually we iterate through the keys, the values, or both:

>>> for key in d:
... print(key, d[key])
key_4 value_4
key_3 value_3
key_1 value_1
key_2 value_2

>>> for key, value in d.items():
... print(key, value)
key_4 value_4
key_3 value_3

>>> for value in d.values():
... print(value)
value_4
value_3
value_1
value_2

#ordering dictionaries
>>> from collections import OrderedDict
>>> d = OrderedDict()
>>> d['key_1'] = 'value_1'
>>> d['key_2'] = 'value_2'
>>> d['key_3'] = 'value_3'
>>> d['key_4'] = 'value_4'


#sets
#Sets allow you to create sets of unique elements and can be created using the keyword set:
>>> a = [0, 1, 1, 0, 2, 3]
>>> set(a)
{0, 1, 2, 3}
>>> set([0, 1, 1, 0, 2, 3, 'a', 'b', 'a'])
{0, 1, 2, 3, 'b', 'a'}
#Alternatively you can use create a set like a list by replacing [ and ] by { and } respectively:
>>> a = {0, 1, 1, 0, 2, 3}
>>> type(a)
set
>>> a
{0, 1, 2, 3}
#Basic operations on set: union (set composed of all elements of both sets) and intersection (set composed of only the common elements):
>>> a = {0, 1, 2, 3}
>>> b = {2, 3, 4, 5}
>>> a.union(b)
{0, 1, 2, 3, 4, 5}
>>> set.union(a, b) # Equivalent
{0, 1, 2, 3, 4, 5}
>>> a.intersection(b)
{2, 3}

#reading from files
#Dowload some books from project Gutenberg, and save them in your current directory. For instance:
#urls = {'moliere':'http://www.gutenberg.org/cache/epub/9070/pg9070.txt',
#'odyssey': 'http://www.gutenberg.org/cache/epub/1728/pg1728.txt',
#'iliad': 'http://www.gutenberg.org/cache/epub/16452/pg16452.txt'}

#5.1 Operations on files
filename = 'odyssey.txt'
#Opening a file is easy: just use open(filename, FLAGS), where flags can be ‘r’ if you are #reading
#the file, ‘w’ if you are writing in it (they are more options, Google it if you are interested).
#Let us read one of the files we just downloaded:
#In [7]: f = open(filename, 'r')
#Now you can read from this file:
#In [8]: l = f.readline()
#Or you can iterate through the lines. Note that in the example below, we set the maximum number of bytes to read to not have to go through the whole book.
#In [9]: for l in f.readlines(120):
#print(l)
#3 in our series by Homer            

#only english character code:
def toChars(s):
    s = s.lower() # lower-case string
    alphabet = 'abcdefghjiklmnopqrstuvwxyz ' # English alphabet
    ans = ''
    for c in s:
        if c in alphabet:
            ans = ans + c
    return ans

#opening a file
f=open('odyssey.txt', 'r')

#opening a file
f=open('odyssey.txt', 'r')

#reading from the file
txt=""
for l in f.readlines():
   # for word in line:
        l= toChars(l)
        txt+= l + " "

#spliting the text in words
d={}
for w in txt.split():
    if w not in d:
        d[w]=1
    else: d[w]=d[w]+1 

#ordering dictionary
dict2 = [(k,v) for v,k in sorted([(v,k) for k,v in d.items()],reverse=True)]
#printing top 10 values
print (dict2[:10])

#pandas http://pandas.pydata.org/pandas-docs/version/0.18.1/tutorials.html

# Extra: Fortune 500

# You can read the data into lists

def readF500ToList():
    """ read fortune 500 data into a list where each element is a list of a row of csv data """
    import csv
    s = []
    with open('fortune500.csv', 'r') as csvfile:
        f500reader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in f500reader:
            s.append(row)
    return s
    
F500list = readF500ToList() # a list of lists
print(F500list[0:3])


# Alternatively, you can read the data using the pandas library

import pandas as pd

def readF500ToPandas():
    """ read fortune 500 data into pandas dataframe """
    df = pd.read_csv('fortune500.csv')
    return df
    

F500df = readF500ToPandas() # This is a pandas "dataframe" used to organise data


# Some useful pandas commands

df[:3] # Get the first three lines of data
df.columns # Get the columns in your data
df.describe() # Get summary statistics

# Get the specified two columns of data for only year 2005
s = df.loc[df.Year == 2005,['Company','Revenue (in millions)']] 

# Get the specified two columns of data for only the first year using indices
s = df.loc[0:499,['Company','Revenue (in millions)']] 


#linear regression in pandas

import statsmodels.formula.api as sm
y= data1[['bwght']]
x= data1[['cigs','faminc']]
result= sm.OLS (y,x).fit()
result.summary()
#http://connor-johnson.com/2014/02/18/linear-regression-with-python/
